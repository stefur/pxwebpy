[
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "Note\n\n\n\nThis library provides a Python client for the PxWeb API, but is not affiliated with the PxWeb project. The examples do not go into detail about how the PxWeb API behaves or responds. For more information about the API itself, check out the official specification."
  },
  {
    "objectID": "examples.html#basic-setup-and-exploration",
    "href": "examples.html#basic-setup-and-exploration",
    "title": "Examples",
    "section": "Basic setup and exploration",
    "text": "Basic setup and exploration\nThe first step is to set up a PxApi object to use.\n\nfrom pxweb import PxApi\n\n# Use the builtin known API instead of a URL\napi = PxApi(\"scb\")\n\napi\n\nPxApi(url='https://api.scb.se/ov0104/v2beta/api/v2',\n        language=sv,\n        disable_cache=False,\n        timeout=30,\n        number_of_tables=5103)\n\n\nWe can check out information about the API, including languages supported, by using .get_config().\n\napi.get_config()\n\n{\n    'apiVersion': '2.0.0',\n    'appVersion': '1.0.0',\n    'languages': [\n        {\n            'id': 'sv',\n            'label': 'Svenska'\n        },\n        {\n            'id': 'en',\n            'label': 'English'\n        }\n    ],\n    'defaultLanguage': 'sv',\n    'maxDataCells': 150000,\n    ... +7\n}\n\n\nIf we want to change the language, we can do so by changing an attribute of the PxApi object like so: api.language = \"en\" This will change the response language for all subsequent queries to the API.\nFrom here we can also browse around and get data. Checking out all tables available is doable with .all_tables(), but probably a bit overwhelming.\n\napi.all_tables()\n\n[\n    {\n        'id': 'TAB4707',\n        'label': 'Antal pågående anställningar efter anställningstid'+39,\n        'description': '',\n        'updated': '2025-09-30T06:00:00Z',\n        'firstPeriod': '2015M04',\n        ... +8\n    },\n    {\n        'id': 'TAB4714',\n        'label': 'Antal pågående anställningar efter anställningstid'+58,\n        'description': '',\n        'updated': '2025-09-30T06:00:00Z',\n        'firstPeriod': '2015M04',\n        ... +8\n    },\n    {\n        'id': 'TAB4718',\n        'label': 'Antal pågående anställningar efter kön, region och'+30,\n        'description': '',\n        'updated': '2025-09-30T06:00:00Z',\n        'firstPeriod': '2020M01',\n        ... +8\n    },\n    {\n        'id': 'TAB4723',\n        'label': 'Antal pågående anställningar i näringslivet efter '+56,\n        'description': '',\n        'updated': '2025-09-30T06:00:00Z',\n        'firstPeriod': '2020M01',\n        ... +8\n    },\n    {\n        'id': 'TAB4344',\n        'label': 'Antal pågående anställningar i näringslivet efter '+65,\n        'description': '',\n        'updated': '2025-09-30T06:00:00Z',\n        'firstPeriod': '2015M04',\n        ... +8\n    },\n    ... +5098\n]\n\n\nTables are organised into subjects and are categorised into different paths. To see all paths available, use .get_paths().\n\napi.get_paths()\n\n[\n    {\n        'id': 'AA',\n        'label': 'Ämnesövergripande statistik'\n    },\n    {\n        'id': 'AA0003',\n        'label': 'Registerdata för integration'\n    },\n    {\n        'id': 'AA0003B',\n        'label': 'Statistik med inriktning mot arbetsmarknaden'\n    },\n    {\n        'id': 'AA0003C',\n        'label': 'Statistik med inriktning mot flyttmönster'\n    },\n    {\n        'id': 'AA0003D',\n        'label': 'Statistik med inriktning mot boende'\n    },\n    ... +830\n]\n\n\nIt’s also possible to filter the paths, for example to get all paths related to a specific subject like “Befolkning”.\n\napi.get_paths(path_id=\"BE\")\n\n[\n    {\n        'id': 'BE',\n        'label': 'Befolkning'\n    },\n    {\n        'id': 'BE0001',\n        'label': 'Namnstatistik'\n    },\n    {\n        'id': 'BE0001D',\n        'label': 'Nyfödda – Äldre tabeller som inte längre uppdatera'+1\n    },\n    {\n        'id': 'BE0001G',\n        'label': 'Hela befolkningen – Äldre tabeller som inte längre'+11\n    },\n    {\n        'id': 'BE0101',\n        'label': 'Befolkningsstatistik'\n    },\n    ... +29\n]\n\n\nTo get all tables that are in specific path you can use .tables_on_path(). Here we take a closer look at “Folkmängd”.\n\napi.tables_on_path(path_id=\"BE0101A\")\n\n[\n    {\n        'id': 'TAB6471',\n        'label': 'Folkmängden per månad efter region, ålder och kön.'+20,\n        'paths': [\n            [...]\n        ]\n    },\n    {\n        'id': 'TAB5444',\n        'label': 'Folkmängden per månad efter region, ålder och kön.'+19,\n        'paths': [\n            [...]\n        ]\n    },\n    {\n        'id': 'TAB5890',\n        'label': 'Folkmängden efter ålder och kön. År 1860-2024',\n        'paths': [\n            [...]\n        ]\n    },\n    {\n        'id': 'TAB638',\n        'label': 'Folkmängden efter region, civilstånd, ålder och kö'+16,\n        'paths': [\n            [...]\n        ]\n    },\n    {\n        'id': 'TAB4537',\n        'label': 'Folkmängden per distrikt, landskap, landsdel eller'+30,\n        'paths': [\n            [...]\n        ]\n    },\n    ... +2\n]"
  },
  {
    "objectID": "examples.html#searching-for-tables",
    "href": "examples.html#searching-for-tables",
    "title": "Examples",
    "section": "Searching for tables",
    "text": "Searching for tables\nIt’s also possible to search for tables using the .search() method.\n\n# Keeping it simple and just look for tables updated in the past 30 days matching the query string\nresults = api.search(query=\"energi\", past_days=30)\n\n# Checking how many tables there are in the results\nlen(results.get(\"tables\"))\n\n20\n\n\nWe can also get the labels and ID’s, or any other metadata, to find out more.\n\n[\n    {k: v for k, v in table.items() if k in (\"id\", \"label\")}\n    for table in results.get(\"tables\")\n]\n\n[\n    {\n        'id': 'TAB5918',\n        'label': 'Konsumentprisindex med fast ränta exklusive energi'+44\n    },\n    {\n        'id': 'TAB6445',\n        'label': 'Snabb-KPI: preliminära förändringstal för KPI, KPI'+49\n    },\n    {\n        'id': 'TAB6394',\n        'label': 'Snabb-KPI: preliminära förändringstal för KPI, KPI'+52\n    },\n    {\n        'id': 'TAB4585',\n        'label': 'Underliggande inflation (Riksbanken), Index 1987=1'+25\n    },\n    {\n        'id': 'TAB5891',\n        'label': 'Tabell 2.35 - Nystartade företag efter näringsgren'+45\n    },\n    ... +15\n]"
  },
  {
    "objectID": "examples.html#getting-table-metadata",
    "href": "examples.html#getting-table-metadata",
    "title": "Examples",
    "section": "Getting table metadata",
    "text": "Getting table metadata\nThere are two methods to get table metadata. You can get the full metadata information by simply calling .get_table_metadata().\nIf you’re interested in the details about variables of a table you can also use .get_table_variables(). This method returns information in a more condensed way which may be easier to overview.\n\n# Use the table ID\ntab_vars = api.get_table_variables(\"TAB2706\")\n\n# Let's check out Region\ntab_vars.get(\"Region\")\n\n{\n    'label': 'region',\n    'category': {\n        'label': {\n            '0114': 'Upplands Väsby',\n            '0115': 'Vallentuna',\n            '0117': 'Österåker',\n            '0120': 'Värmdö',\n            '0123': 'Järfälla',\n            ... +318\n        }\n    },\n    'elimination': True,\n    'codelists': [\n        {\n            'id': 'vs_RegionKommun07+BaraEjAggr',\n            'label': 'Kommuner och Bara kommun (1229) som upphörde 1976'\n        },\n        {\n            'id': 'vs_RegionValkretsTot99',\n            'label': 'Totalt, alla redovisade valkretsar'\n        },\n        {\n            'id': 'vs_RegionValkrets99',\n            'label': 'Valkretsar'\n        }\n    ]\n}\n\n\nAs can be seen above elimination is True for \"Region\", so the variable can be skipped over. But there’s also a few code lists associated with the variable.\n\nCode lists\nGetting information about code lists can be done with .get_code_list().\n\n# Fetching and unpacking 'values' of 'vs_RegionValkrets99'\napi.get_code_list(\"vs_RegionValkrets99\").get(\"values\")\n\n[\n    {\n        'code': 'VR1',\n        'label': 'Stockholms kommuns valkrets',\n        'valueMap': [\n            'VR1'\n        ]\n    },\n    {\n        'code': 'VR2',\n        'label': 'Stockholms läns valkrets',\n        'valueMap': [\n            'VR2'\n        ]\n    },\n    {\n        'code': 'VR3',\n        'label': 'Uppsala läns valkrets',\n        'valueMap': [\n            'VR3'\n        ]\n    },\n    {\n        'code': 'VR4',\n        'label': 'Södermanlands läns valkrets',\n        'valueMap': [\n            'VR4'\n        ]\n    },\n    {\n        'code': 'VR5',\n        'label': 'Östergötlands läns valkrets',\n        'valueMap': [\n            'VR5'\n        ]\n    },\n    ... +26\n]\n\n\nThe codes can then be used in a query for a selection based on the code list. More on that in Getting table data."
  },
  {
    "objectID": "examples.html#getting-table-data",
    "href": "examples.html#getting-table-data",
    "title": "Examples",
    "section": "Getting table data",
    "text": "Getting table data\nTo get data with .get_table_data() we need a few things.\n\nA table ID\nA selection of value codes from variables\nA code list (optional)\n\n\n# Getting some election results for specific regions, using a code list to match value codes\ndataset = api.get_table_data(\n    \"TAB2706\",\n    value_codes={\n        \"ContentsCode\": \"ME0104B6\",\n        \"Tid\": \"2022\",\n        \"Region\": [\"VR2\", \"VR3\"],\n        \"Partimm\": [\n            \"M\",\n            \"C\",\n            \"FP\",\n            \"KD\",\n            \"MP\",\n            \"S\",\n            \"V\",\n            \"SD\",\n            \"ÖVRIGA\",\n            \"OGILTIGA\",\n            \"VALSKOLKARE\",\n        ],\n    },\n    code_list={\"Region\": \"vs_RegionValkrets99\"},\n)\n\n# A finished dataset looks like this\ndataset\n\n[\n    {\n        'region': 'VR2 Stockholms läns valkrets',\n        'parti mm': 'Moderaterna',\n        'tabellinnehåll': 'Antal röster',\n        'valår': '2022',\n        'value': 197466\n    },\n    {\n        'region': 'VR2 Stockholms läns valkrets',\n        'parti mm': 'Centerpartiet',\n        'tabellinnehåll': 'Antal röster',\n        'valår': '2022',\n        'value': 60776\n    },\n    {\n        'region': 'VR2 Stockholms läns valkrets',\n        'parti mm': 'Liberalerna',\n        'tabellinnehåll': 'Antal röster',\n        'valår': '2022',\n        'value': 48949\n    },\n    {\n        'region': 'VR2 Stockholms läns valkrets',\n        'parti mm': 'Kristdemokraterna',\n        'tabellinnehåll': 'Antal röster',\n        'valår': '2022',\n        'value': 40207\n    },\n    {\n        'region': 'VR2 Stockholms läns valkrets',\n        'parti mm': 'Miljöpartiet',\n        'tabellinnehåll': 'Antal röster',\n        'valår': '2022',\n        'value': 42284\n    },\n    ... +17\n]\n\n\n\nLoading into dataframes\nThe native format of the returned dataset can now easily be loaded into a dataframe.\nFor instance polars:\n\nimport polars as pl\n\npl.DataFrame(dataset)\n\n\nshape: (22, 5)\n\n\n\nregion\nparti mm\ntabellinnehåll\nvalår\nvalue\n\n\nstr\nstr\nstr\nstr\ni64\n\n\n\n\n\"VR2 Stockholms läns valkrets\"\n\"Moderaterna\"\n\"Antal röster\"\n\"2022\"\n197466\n\n\n\"VR2 Stockholms läns valkrets\"\n\"Centerpartiet\"\n\"Antal röster\"\n\"2022\"\n60776\n\n\n\"VR2 Stockholms läns valkrets\"\n\"Liberalerna\"\n\"Antal röster\"\n\"2022\"\n48949\n\n\n\"VR2 Stockholms läns valkrets\"\n\"Kristdemokraterna\"\n\"Antal röster\"\n\"2022\"\n40207\n\n\n\"VR2 Stockholms läns valkrets\"\n\"Miljöpartiet\"\n\"Antal röster\"\n\"2022\"\n42284\n\n\n…\n…\n…\n…\n…\n\n\n\"VR3 Uppsala läns valkrets\"\n\"Vänsterpartiet\"\n\"Antal röster\"\n\"2022\"\n19543\n\n\n\"VR3 Uppsala läns valkrets\"\n\"Sverigedemokraterna\"\n\"Antal röster\"\n\"2022\"\n45237\n\n\n\"VR3 Uppsala läns valkrets\"\n\"övriga partier\"\n\"Antal röster\"\n\"2022\"\n4134\n\n\n\"VR3 Uppsala läns valkrets\"\n\"ogiltiga valsedlar\"\n\"Antal röster\"\n\"2022\"\n2410\n\n\n\"VR3 Uppsala läns valkrets\"\n\"ej röstande\"\n\"Antal röster\"\n\"2022\"\n40954\n\n\n\n\n\n\nBut also pandas and pyarrow:\n\nimport pandas as pd\n\npd.DataFrame(dataset)\n\n\n\n\n\n\n\n\nregion\nparti mm\ntabellinnehåll\nvalår\nvalue\n\n\n\n\n0\nVR2 Stockholms läns valkrets\nModeraterna\nAntal röster\n2022\n197466\n\n\n1\nVR2 Stockholms läns valkrets\nCenterpartiet\nAntal röster\n2022\n60776\n\n\n2\nVR2 Stockholms läns valkrets\nLiberalerna\nAntal röster\n2022\n48949\n\n\n3\nVR2 Stockholms läns valkrets\nKristdemokraterna\nAntal röster\n2022\n40207\n\n\n4\nVR2 Stockholms läns valkrets\nMiljöpartiet\nAntal röster\n2022\n42284\n\n\n5\nVR2 Stockholms läns valkrets\nSocialdemokraterna\nAntal röster\n2022\n223056\n\n\n6\nVR2 Stockholms läns valkrets\nVänsterpartiet\nAntal röster\n2022\n51623\n\n\n7\nVR2 Stockholms läns valkrets\nSverigedemokraterna\nAntal röster\n2022\n144315\n\n\n8\nVR2 Stockholms läns valkrets\növriga partier\nAntal röster\n2022\n13836\n\n\n9\nVR2 Stockholms läns valkrets\nogiltiga valsedlar\nAntal röster\n2022\n7695\n\n\n10\nVR2 Stockholms läns valkrets\nej röstande\nAntal röster\n2022\n176249\n\n\n11\nVR3 Uppsala läns valkrets\nModeraterna\nAntal röster\n2022\n45457\n\n\n12\nVR3 Uppsala läns valkrets\nCenterpartiet\nAntal röster\n2022\n18040\n\n\n13\nVR3 Uppsala läns valkrets\nLiberalerna\nAntal röster\n2022\n12465\n\n\n14\nVR3 Uppsala läns valkrets\nKristdemokraterna\nAntal röster\n2022\n14766\n\n\n15\nVR3 Uppsala läns valkrets\nMiljöpartiet\nAntal röster\n2022\n16750\n\n\n16\nVR3 Uppsala läns valkrets\nSocialdemokraterna\nAntal röster\n2022\n72499\n\n\n17\nVR3 Uppsala läns valkrets\nVänsterpartiet\nAntal röster\n2022\n19543\n\n\n18\nVR3 Uppsala läns valkrets\nSverigedemokraterna\nAntal röster\n2022\n45237\n\n\n19\nVR3 Uppsala läns valkrets\növriga partier\nAntal röster\n2022\n4134\n\n\n20\nVR3 Uppsala läns valkrets\nogiltiga valsedlar\nAntal röster\n2022\n2410\n\n\n21\nVR3 Uppsala läns valkrets\nej röstande\nAntal röster\n2022\n40954\n\n\n\n\n\n\n\n\nimport pyarrow as pa\n\npa.Table.from_pylist(dataset)\n\npyarrow.Table\nregion: string\nparti mm: string\ntabellinnehåll: string\nvalår: string\nvalue: int64\n----\nregion: [[\"VR2 Stockholms läns valkrets\",\"VR2 Stockholms läns valkrets\",\"VR2 Stockholms läns valkrets\",\"VR2 Stockholms läns valkrets\",\"VR2 Stockholms läns valkrets\",...,\"VR3 Uppsala läns valkrets\",\"VR3 Uppsala läns valkrets\",\"VR3 Uppsala läns valkrets\",\"VR3 Uppsala läns valkrets\",\"VR3 Uppsala läns valkrets\"]]\nparti mm: [[\"Moderaterna\",\"Centerpartiet\",\"Liberalerna\",\"Kristdemokraterna\",\"Miljöpartiet\",...,\"Vänsterpartiet\",\"Sverigedemokraterna\",\"övriga partier\",\"ogiltiga valsedlar\",\"ej röstande\"]]\ntabellinnehåll: [[\"Antal röster\",\"Antal röster\",\"Antal röster\",\"Antal röster\",\"Antal röster\",...,\"Antal röster\",\"Antal röster\",\"Antal röster\",\"Antal röster\",\"Antal röster\"]]\nvalår: [[\"2022\",\"2022\",\"2022\",\"2022\",\"2022\",...,\"2022\",\"2022\",\"2022\",\"2022\",\"2022\"]]\nvalue: [[197466,60776,48949,40207,42284,...,19543,45237,4134,2410,40954]]\n\n\n\n\nUsing wildcards\nWildcards are useful, and here is an example using wildcards for a larger query.\n\n# Using wildcards here to get all the municipalities in Stockholm, all months of 2024, all genders and 5-year age groups.\n# The somewhat cryptic ContentsCode represents count\npopulation_data = api.get_table_data(\n    \"TAB5444\",\n    value_codes={\n        \"Alder\": \"*\",\n        \"Region\": \"01*\",\n        \"Tid\": \"2024*\",\n        \"Kon\": \"*\",\n        \"ContentsCode\": \"000003O5\",\n    },\n    code_list={\"Alder\": \"agg_Ålder5år\", \"Region\": \"vs_RegionKommun07\"},\n)\n\n# This returns over ten thousand rows of data\nlen(population_data)\n\n13728\n\n\n\n\nLarge queries and batching\npxwebpy allows for very large queries by using automatic batching to stay within the rate limits of the API.\nConsider the following query for population per year (\"TAB1267\"):\n\ncodes = {\"ContentsCode\": \"BE0101A9\", \"Region\": \"*\", \"Alder\": \"*\", \"Kon\": \"*\", \"Tid\": \"*\"}\nlists = {\"Region\": \"vs_RegionKommun07\", \"Alder\": \"vs_Ålder1årA\"}\n\nThis query would produce over 1 million data cells, overshooting the data cell limit of the API (150 000 in this case).\nTo handle this pxwebpy will break up the query into several subqueries to stay within the limit of data cells while also respecting the rate limit of the number of queries allowed within a give time window. Calls are multithreaded to fetch results as fast as possible.\n\n# Executing the large query\ndata = api.get_table_data(\"TAB1267\", value_codes=codes, code_list=lists)\n\n# And then loading the result into a dataframe\npl.DataFrame(data)\n\n\nshape: (1_347_340, 6)\n\n\n\nregion\nålder\nkön\ntabellinnehåll\når\nvalue\n\n\nstr\nstr\nstr\nstr\nstr\ni64\n\n\n\n\n\"0114 Upplands Väsby\"\n\"0 år\"\n\"män\"\n\"Antal\"\n\"2002\"\n207\n\n\n\"0114 Upplands Väsby\"\n\"0 år\"\n\"män\"\n\"Antal\"\n\"2003\"\n218\n\n\n\"0114 Upplands Väsby\"\n\"0 år\"\n\"män\"\n\"Antal\"\n\"2004\"\n188\n\n\n\"0114 Upplands Väsby\"\n\"0 år\"\n\"män\"\n\"Antal\"\n\"2005\"\n201\n\n\n\"0114 Upplands Väsby\"\n\"0 år\"\n\"män\"\n\"Antal\"\n\"2006\"\n218\n\n\n…\n…\n…\n…\n…\n…\n\n\n\"2584 Kiruna\"\n\"100+ år\"\n\"kvinnor\"\n\"Antal\"\n\"2020\"\n2\n\n\n\"2584 Kiruna\"\n\"100+ år\"\n\"kvinnor\"\n\"Antal\"\n\"2021\"\n1\n\n\n\"2584 Kiruna\"\n\"100+ år\"\n\"kvinnor\"\n\"Antal\"\n\"2022\"\n1\n\n\n\"2584 Kiruna\"\n\"100+ år\"\n\"kvinnor\"\n\"Antal\"\n\"2023\"\n1\n\n\n\"2584 Kiruna\"\n\"100+ år\"\n\"kvinnor\"\n\"Antal\"\n\"2024\"\n2\n\n\n\n\n\n\n\n\nIn-memory caching\nBy default pxwebpy uses in-memory caching for API responses, which can be useful for exploration and iterative use. Caching both reduces the load on the API and speeds up execution. However it can be turned off if needed simply by setting the attribute disable_cache to True."
  },
  {
    "objectID": "reference/get_known_apis.html",
    "href": "reference/get_known_apis.html",
    "title": "get_known_apis",
    "section": "",
    "text": "get_known_apis()\nGet all the known builtin APIs, shorthand names as keys and corresponding URL as value.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nA dictionary with the API shorthand names as keys and the URLs as values."
  },
  {
    "objectID": "reference/get_known_apis.html#returns",
    "href": "reference/get_known_apis.html#returns",
    "title": "get_known_apis",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\ndict\nA dictionary with the API shorthand names as keys and the URLs as values."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Get started",
    "section": "",
    "text": "pxwebpy is a Python client for the PxWeb API. The goal is to make it easier to get data from the API and into a dataframe. It is BYODF* so that you can use what DataFrame library you prefer, be it polars, pandas or a pyarrow table.\n* = Bring your own dataframe"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Get started",
    "section": "Installation",
    "text": "Installation\nThe package is on PyPI and the easiest way to install it into your environment is:\npip install pxwebpy\nOr by using uv:\nuv add pxwebpy"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Get started",
    "section": "Usage",
    "text": "Usage\n\nfrom pxweb import PxApi\nimport polars as pl\n\napi = PxApi(\"scb\")\n\n# Swedish population per year\ndata = api.get_table_data(\n    table_id=\"TAB5890\",\n    value_codes={\"Tid\": [\"2022\", \"2023\", \"2024\"], \"ContentsCode\": \"0000053A\"},\n)\n\npl.DataFrame(data)\n\n\nshape: (3, 3)\n\n\n\ntabellinnehåll\når\nvalue\n\n\nstr\nstr\ni64\n\n\n\n\n\"Antal\"\n\"2022\"\n10521556\n\n\n\"Antal\"\n\"2023\"\n10551707\n\n\n\"Antal\"\n\"2024\"\n10587710\n\n\n\n\n\n\nHave a look at the Examples or see the Reference for more details."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Tools to explore tables and get data from the PxWeb API.\n\n\n\nPxApi\nA wrapper around the PxWeb API. Enables exploring available datasets interactively, getting table data, variables as well as other metadata.\n\n\nget_known_apis\nGet all the known builtin APIs, shorthand names as keys and corresponding URL as value."
  },
  {
    "objectID": "reference/index.html#api-interaction",
    "href": "reference/index.html#api-interaction",
    "title": "Reference",
    "section": "",
    "text": "Tools to explore tables and get data from the PxWeb API.\n\n\n\nPxApi\nA wrapper around the PxWeb API. Enables exploring available datasets interactively, getting table data, variables as well as other metadata.\n\n\nget_known_apis\nGet all the known builtin APIs, shorthand names as keys and corresponding URL as value."
  },
  {
    "objectID": "reference/PxApi.html",
    "href": "reference/PxApi.html",
    "title": "PxApi",
    "section": "",
    "text": "PxApi(url, language=None, disable_cache=False, timeout=30)\nA wrapper around the PxWeb API. Enables exploring available datasets interactively, getting table data, variables as well as other metadata.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nurl\nstr | KnownApi\nEither a shorthand name for a builtin API, e.g. “scb”. To check out avaiable APIs, use get_known_apis().\nrequired\n\n\nlanguage\nstr\nThe language to be used with the API. You can check available languages using the .get_config() method.\nNone\n\n\ndisable_cache\nbool\nDisable the in-memory cache that is used for API responses.\nFalse\n\n\ntimeout\nint\nThe timeout in seconds to use when calling the API.\n30\n\n\n\n\n\n\nGet the SCB PxWeb API using the shorthand:\n&gt;&gt;&gt; api = PxApi(\"scb\")\n&gt;&gt;&gt; api\nPxApi(url='https://api.scb.se/ov0104/v2beta/api/v2',\n           language='sv',\n           disable_cache=False,\n           timeout=30)\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nall_tables\nGet a list of all tables available with some basic metadata. Use .get_table_metadata() for extensive metadata about a specific table.\n\n\nget_code_list\nGet information about a code list.\n\n\nget_config\nRetrieve the configuration for the API.\n\n\nget_paths\nList all paths available to explore. Use the ID to list tables on a specific path with .tables_on_path().\n\n\nget_table_data\nGet table data that can be used with dataframes like polars or pandas. The query is constructed with the method parameters.\n\n\nget_table_metadata\nGet the complete set of metadata for a table.\n\n\nget_table_variables\nGet the specific metadata for variables and value codes. Also includes information whether a variable can be eliminated as well as the available code lists.\n\n\nsearch\nSearch for tables.\n\n\ntables_on_path\nList all the tables available on the path.\n\n\n\n\n\nPxApi.all_tables()\nGet a list of all tables available with some basic metadata. Use .get_table_metadata() for extensive metadata about a specific table.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nAll tables.\n\n\n\n\n\n\n\nPxApi.get_code_list(code_list_id)\nGet information about a code list.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncode_list_id\nstr\nThe ID of a code list.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response with the code list information.\n\n\n\n\n\n\nBy checking out the table variables with the .get_table_variables() method we can get available code lists.\n&gt;&gt;&gt; meta = api.get_table_variables(\"TAB638\")\nWith the metadata, get the code lists available for “Region”.\n&gt;&gt;&gt; meta.get(\"Region\").get(\"codelists\")\n[{'id': 'agg_RegionA-region_2', 'label': 'A-regioner'},\n{'id': 'agg_RegionKommungrupp2005-_1', 'label': 'Kommungrupper (SKL:s) 2005'},\n{'id': 'agg_RegionKommungrupp2011-', 'label': '...'},\n{'id': 'vs_RegionKommun07', 'label': 'Kommuner'},\n{'id': 'vs_RegionLän07', 'label': 'Län'},\n{'id': 'vs_RegionRiket99', 'label': 'Riket'},\n...]\nNow we can look closer at a specific code list by using the method.\n&gt;&gt;&gt; api.get_code_list(\"vs_RegionLän07\")\n{\n...     'id': 'vs_RegionLän07',\n...     'label': 'Län',\n...     'language': 'sv',\n...     'type': 'Valueset',\n...     'values': [\n...         {'code': '01', 'label': 'Stockholms län'},\n...         {'code': '03', 'label': 'Uppsala län'},\n...         {'code': '04', 'label': 'Södermanlands län'},\n...         ...\n...     ]\n... }\n\n\n\n\nPxApi.get_config()\nRetrieve the configuration for the API.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the configuration.\n\n\n\n\n\n\n&gt;&gt;&gt; conf = api.get_config()\nCheck the languages available.\n&gt;&gt;&gt; conf.get(\"languages\")\n[{'id': 'sv', 'label': 'Svenska'},\n {'id': 'en', 'label': 'English'}]\n\n\n\n\nPxApi.get_paths(path_id=None)\nList all paths available to explore. Use the ID to list tables on a specific path with .tables_on_path().\n\n\n&gt;&gt;&gt; api.get_paths()\n[\n... {'id': 'AA', 'label': 'Ämnesövergripande statistik'},\n... {'id': 'AA0003', 'label': 'Registerdata för integration'},\n... {'id': 'AA0003B', 'label': 'Statistik med inriktning mot arbetsmarknaden'},\n... {'id': 'AA0003C', 'label': 'Statistik med inriktning mot flyttmönster'},\n... {'id': 'AA0003D', 'label': 'Statistik med inriktning mot boende'},\n... ...\n]\nYou can also inspect a subpath by supplying a path_id.\n&gt;&gt;&gt; api.get_paths(\"AM0101\")\n[\n... {'id': 'AM', 'label': 'Arbetsmarknad'},\n... {'id': 'AM0101',\n...  'label': 'Konjunkturstatistik, löner för privat sektor (KLP)'},\n... {'id': 'AM0101A', 'label': 'Arbetare: Timlön efter näringsgren'},\n... {'id': 'AM0101B', 'label': 'Tjänstemän: Månadslön efter näringsgren'},\n... {'id': 'AM0101C', 'label': 'Äldre tabeller som inte uppdateras'},\n... {'id': 'AM0101X', 'label': 'Nyckeltal'},\n]\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nPaths available.\n\n\n\n\n\n\n\nPxApi.get_table_data(table_id, value_codes=None, code_list=None)\nGet table data that can be used with dataframes like polars or pandas. The query is constructed with the method parameters. An empty value code selection returns a default selection for the table.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nAn ID of a table to get data from.\nrequired\n\n\nvalue_codes\ndict\nThe value codes to use for data selection where the keys are the variable codes. You can use the .get_table_variables() to explore what’s available.\nNone\n\n\ncode_list\ndict\nAny named code list to use with a variable for code selection.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nA dataset in a native format that can be loaded into a dataframe.\n\n\n\n\n\n\nA simple query to get the population of 2024 for all the Stockholm municipalities using 5-year age groups.\n&gt;&gt;&gt; dataset = api.get_table_data(\n...     table_id=\"TAB638\",\n...     value_codes={\n...         \"ContentsCode\": [\"BE0101N1\"],\n...         \"Region\": [\"01*\"],\n...         \"Alder\": [\"*\"],\n...         \"Tid\": [\"2024\"]\n...     },\n...     code_list={\n...         \"Alder\": \"agg_Ålder5år\",\n...         \"Region\": \"vs_RegionKommun07\"\n...     }\n... )\nThis dataset can then easily be turned into a dataframe, for example with polars.\n&gt;&gt;&gt; pl.DataFrame(dataset)\nshape: (572, 5)\n┌─────────────────────┬────────────────┬────────────────┬──────┬───────┐\n│ region              ┆ ålder          ┆ tabellinnehåll ┆ år   ┆ value │\n│ ---                 ┆ ---            ┆ ---            ┆ ---  ┆ ---   │\n│ str                 ┆ str            ┆ str            ┆ str  ┆ i64   │\n╞═════════════════════╪════════════════╪════════════════╪══════╪═══════╡\n│ 0114 Upplands Väsby ┆ 0-4 år         ┆ Folkmängd      ┆ 2024 ┆ 2931  │\n│ 0114 Upplands Väsby ┆ 5-9 år         ┆ Folkmängd      ┆ 2024 ┆ 3341  │\n│ 0114 Upplands Väsby ┆ 10-14 år       ┆ Folkmängd      ┆ 2024 ┆ 3237  │\n│ 0114 Upplands Väsby ┆ 15-19 år       ┆ Folkmängd      ┆ 2024 ┆ 3083  │\n│ 0114 Upplands Väsby ┆ 20-24 år       ┆ Folkmängd      ┆ 2024 ┆ 2573  │\n│ …                   ┆ …              ┆ …              ┆ …    ┆ …     │\n│ 0192 Nynäshamn      ┆ 85-89 år       ┆ Folkmängd      ┆ 2024 ┆ 554   │\n│ 0192 Nynäshamn      ┆ 90-94 år       ┆ Folkmängd      ┆ 2024 ┆ 230   │\n│ 0192 Nynäshamn      ┆ 95-99 år       ┆ Folkmängd      ┆ 2024 ┆ 51    │\n│ 0192 Nynäshamn      ┆ 100+ år        ┆ Folkmängd      ┆ 2024 ┆ 7     │\n│ 0192 Nynäshamn      ┆ uppgift saknas ┆ Folkmängd      ┆ 2024 ┆ 0     │\n└─────────────────────┴────────────────┴────────────────┴──────┴───────┘\n\n\n\n\nPxApi.get_table_metadata(table_id)\nGet the complete set of metadata for a table.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nThe ID of a table to get metadata from.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the metadata.\n\n\n\n\n\n\n&gt;&gt;&gt; meta = api.get_table_metadata(\"TAB638\")\n&gt;&gt;&gt; meta.keys()\ndict_keys(['version', 'class', 'href', 'label', 'source',\n...         'updated', 'link', 'note', 'role', 'id',\n...         'size', 'dimension', 'extension'])\n&gt;&gt;&gt; meta.get(\"label\")\n'Folkmängden efter region, civilstånd, ålder, kön, tabellinnehåll och år'\n\n\n\n\nPxApi.get_table_variables(table_id)\nGet the specific metadata for variables and value codes. Also includes information whether a variable can be eliminated as well as the available code lists. The information returned is unpacked and slightly more easily navigated than the output from the .get_table_metadata() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nThe ID of a table to get metadata from.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the metadata.\n\n\n\n\n\n\n&gt;&gt;&gt; api.get_table_variable(\"TAB638\")\n{\n...     'Region': {\n...         'label': 'region',\n...         'category': {'label': {'00': 'Riket', '01': 'Stockholms län', ...}},\n...         'elimination': True,\n...         'codelists': [{'id': 'vs_RegionKommun07', 'label': 'Kommuner'}, ...]\n...     },\n...     'Alder': {\n...         'label': 'ålder',\n...         'category': {'label': {'0': '0 år', '1': '1 år', ...}},\n...         'elimination': True,\n...         'codelists': [{'id': 'agg_Ålder5år', 'label': '5-årsklasser'}, ...]\n...     },\n...     'Tid': {\n...         'label': 'år',\n...         'category': {'label': {'2022': '2022', '2023': '2023', ...}},\n...         'elimination': False,\n...         'codelists': []\n...     },\n...     ...\n}\n\n\n\n\nPxApi.search(\n    query=None,\n    past_days=None,\n    include_discontinued=None,\n    page_size=None,\n)\nSearch for tables.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquery\nstr\nA string to search for.\nNone\n\n\npast_days\nint\nReturn results where tables have been updated within n number of days.\nNone\n\n\ninclude_discontinued\nbool\nInclude any tables that are discontinued.\nNone\n\n\npage_size\nint\nNumber of results per page in the returning dict. Results will be paginated if they exceed this value.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response of the search query.\n\n\n\n\n\n\n&gt;&gt;&gt; api = PxApi(\"scb\")\n&gt;&gt;&gt; search = api.search(query=\"arbetsmarknad\", past_days=180)\n&gt;&gt;&gt; len(search.get(\"tables\"))\n4\n\n\n\n\nPxApi.tables_on_path(path_id)\nList all the tables available on the path.\n\n\n&gt;&gt;&gt; api.tables_on_path(\"AM0101C\")\n[\n... {'id': 'TAB2566',\n...  'label': 'Genomsnittlig månadslön för tjänstemän, privat sektor (KLP) efter näringsgren SNI2002 ...'},\n... {'id': 'TAB2552',\n...  'label': 'Genomsnittlig timlön för arbetare, privat sektor (KLP) efter näringsgren SNI2002 ...'},\n... {'id': 'TAB386',\n...  'label': 'Antal arbetare inom industrin efter näringsgren SNI92 ...'},\n... {'id': 'TAB2565',\n...  'label': 'Genomsnittlig månadslön för tjänstemän, privat sektor (KLP) efter provision och näringsgren SNI92 ...'},\n... {'id': 'TAB2551',\n...  'label': 'Genomsnittlig timlön för arbetare, privat sektor (KLP) efter näringsgren SNI92 ...'},\n... ...\n]     \n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nAll tables on the path."
  },
  {
    "objectID": "reference/PxApi.html#parameters",
    "href": "reference/PxApi.html#parameters",
    "title": "PxApi",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nurl\nstr | KnownApi\nEither a shorthand name for a builtin API, e.g. “scb”. To check out avaiable APIs, use get_known_apis().\nrequired\n\n\nlanguage\nstr\nThe language to be used with the API. You can check available languages using the .get_config() method.\nNone\n\n\ndisable_cache\nbool\nDisable the in-memory cache that is used for API responses.\nFalse\n\n\ntimeout\nint\nThe timeout in seconds to use when calling the API.\n30"
  },
  {
    "objectID": "reference/PxApi.html#examples",
    "href": "reference/PxApi.html#examples",
    "title": "PxApi",
    "section": "",
    "text": "Get the SCB PxWeb API using the shorthand:\n&gt;&gt;&gt; api = PxApi(\"scb\")\n&gt;&gt;&gt; api\nPxApi(url='https://api.scb.se/ov0104/v2beta/api/v2',\n           language='sv',\n           disable_cache=False,\n           timeout=30)"
  },
  {
    "objectID": "reference/PxApi.html#methods",
    "href": "reference/PxApi.html#methods",
    "title": "PxApi",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nall_tables\nGet a list of all tables available with some basic metadata. Use .get_table_metadata() for extensive metadata about a specific table.\n\n\nget_code_list\nGet information about a code list.\n\n\nget_config\nRetrieve the configuration for the API.\n\n\nget_paths\nList all paths available to explore. Use the ID to list tables on a specific path with .tables_on_path().\n\n\nget_table_data\nGet table data that can be used with dataframes like polars or pandas. The query is constructed with the method parameters.\n\n\nget_table_metadata\nGet the complete set of metadata for a table.\n\n\nget_table_variables\nGet the specific metadata for variables and value codes. Also includes information whether a variable can be eliminated as well as the available code lists.\n\n\nsearch\nSearch for tables.\n\n\ntables_on_path\nList all the tables available on the path.\n\n\n\n\n\nPxApi.all_tables()\nGet a list of all tables available with some basic metadata. Use .get_table_metadata() for extensive metadata about a specific table.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nAll tables.\n\n\n\n\n\n\n\nPxApi.get_code_list(code_list_id)\nGet information about a code list.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncode_list_id\nstr\nThe ID of a code list.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response with the code list information.\n\n\n\n\n\n\nBy checking out the table variables with the .get_table_variables() method we can get available code lists.\n&gt;&gt;&gt; meta = api.get_table_variables(\"TAB638\")\nWith the metadata, get the code lists available for “Region”.\n&gt;&gt;&gt; meta.get(\"Region\").get(\"codelists\")\n[{'id': 'agg_RegionA-region_2', 'label': 'A-regioner'},\n{'id': 'agg_RegionKommungrupp2005-_1', 'label': 'Kommungrupper (SKL:s) 2005'},\n{'id': 'agg_RegionKommungrupp2011-', 'label': '...'},\n{'id': 'vs_RegionKommun07', 'label': 'Kommuner'},\n{'id': 'vs_RegionLän07', 'label': 'Län'},\n{'id': 'vs_RegionRiket99', 'label': 'Riket'},\n...]\nNow we can look closer at a specific code list by using the method.\n&gt;&gt;&gt; api.get_code_list(\"vs_RegionLän07\")\n{\n...     'id': 'vs_RegionLän07',\n...     'label': 'Län',\n...     'language': 'sv',\n...     'type': 'Valueset',\n...     'values': [\n...         {'code': '01', 'label': 'Stockholms län'},\n...         {'code': '03', 'label': 'Uppsala län'},\n...         {'code': '04', 'label': 'Södermanlands län'},\n...         ...\n...     ]\n... }\n\n\n\n\nPxApi.get_config()\nRetrieve the configuration for the API.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the configuration.\n\n\n\n\n\n\n&gt;&gt;&gt; conf = api.get_config()\nCheck the languages available.\n&gt;&gt;&gt; conf.get(\"languages\")\n[{'id': 'sv', 'label': 'Svenska'},\n {'id': 'en', 'label': 'English'}]\n\n\n\n\nPxApi.get_paths(path_id=None)\nList all paths available to explore. Use the ID to list tables on a specific path with .tables_on_path().\n\n\n&gt;&gt;&gt; api.get_paths()\n[\n... {'id': 'AA', 'label': 'Ämnesövergripande statistik'},\n... {'id': 'AA0003', 'label': 'Registerdata för integration'},\n... {'id': 'AA0003B', 'label': 'Statistik med inriktning mot arbetsmarknaden'},\n... {'id': 'AA0003C', 'label': 'Statistik med inriktning mot flyttmönster'},\n... {'id': 'AA0003D', 'label': 'Statistik med inriktning mot boende'},\n... ...\n]\nYou can also inspect a subpath by supplying a path_id.\n&gt;&gt;&gt; api.get_paths(\"AM0101\")\n[\n... {'id': 'AM', 'label': 'Arbetsmarknad'},\n... {'id': 'AM0101',\n...  'label': 'Konjunkturstatistik, löner för privat sektor (KLP)'},\n... {'id': 'AM0101A', 'label': 'Arbetare: Timlön efter näringsgren'},\n... {'id': 'AM0101B', 'label': 'Tjänstemän: Månadslön efter näringsgren'},\n... {'id': 'AM0101C', 'label': 'Äldre tabeller som inte uppdateras'},\n... {'id': 'AM0101X', 'label': 'Nyckeltal'},\n]\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nPaths available.\n\n\n\n\n\n\n\nPxApi.get_table_data(table_id, value_codes=None, code_list=None)\nGet table data that can be used with dataframes like polars or pandas. The query is constructed with the method parameters. An empty value code selection returns a default selection for the table.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nAn ID of a table to get data from.\nrequired\n\n\nvalue_codes\ndict\nThe value codes to use for data selection where the keys are the variable codes. You can use the .get_table_variables() to explore what’s available.\nNone\n\n\ncode_list\ndict\nAny named code list to use with a variable for code selection.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nA dataset in a native format that can be loaded into a dataframe.\n\n\n\n\n\n\nA simple query to get the population of 2024 for all the Stockholm municipalities using 5-year age groups.\n&gt;&gt;&gt; dataset = api.get_table_data(\n...     table_id=\"TAB638\",\n...     value_codes={\n...         \"ContentsCode\": [\"BE0101N1\"],\n...         \"Region\": [\"01*\"],\n...         \"Alder\": [\"*\"],\n...         \"Tid\": [\"2024\"]\n...     },\n...     code_list={\n...         \"Alder\": \"agg_Ålder5år\",\n...         \"Region\": \"vs_RegionKommun07\"\n...     }\n... )\nThis dataset can then easily be turned into a dataframe, for example with polars.\n&gt;&gt;&gt; pl.DataFrame(dataset)\nshape: (572, 5)\n┌─────────────────────┬────────────────┬────────────────┬──────┬───────┐\n│ region              ┆ ålder          ┆ tabellinnehåll ┆ år   ┆ value │\n│ ---                 ┆ ---            ┆ ---            ┆ ---  ┆ ---   │\n│ str                 ┆ str            ┆ str            ┆ str  ┆ i64   │\n╞═════════════════════╪════════════════╪════════════════╪══════╪═══════╡\n│ 0114 Upplands Väsby ┆ 0-4 år         ┆ Folkmängd      ┆ 2024 ┆ 2931  │\n│ 0114 Upplands Väsby ┆ 5-9 år         ┆ Folkmängd      ┆ 2024 ┆ 3341  │\n│ 0114 Upplands Väsby ┆ 10-14 år       ┆ Folkmängd      ┆ 2024 ┆ 3237  │\n│ 0114 Upplands Väsby ┆ 15-19 år       ┆ Folkmängd      ┆ 2024 ┆ 3083  │\n│ 0114 Upplands Väsby ┆ 20-24 år       ┆ Folkmängd      ┆ 2024 ┆ 2573  │\n│ …                   ┆ …              ┆ …              ┆ …    ┆ …     │\n│ 0192 Nynäshamn      ┆ 85-89 år       ┆ Folkmängd      ┆ 2024 ┆ 554   │\n│ 0192 Nynäshamn      ┆ 90-94 år       ┆ Folkmängd      ┆ 2024 ┆ 230   │\n│ 0192 Nynäshamn      ┆ 95-99 år       ┆ Folkmängd      ┆ 2024 ┆ 51    │\n│ 0192 Nynäshamn      ┆ 100+ år        ┆ Folkmängd      ┆ 2024 ┆ 7     │\n│ 0192 Nynäshamn      ┆ uppgift saknas ┆ Folkmängd      ┆ 2024 ┆ 0     │\n└─────────────────────┴────────────────┴────────────────┴──────┴───────┘\n\n\n\n\nPxApi.get_table_metadata(table_id)\nGet the complete set of metadata for a table.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nThe ID of a table to get metadata from.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the metadata.\n\n\n\n\n\n\n&gt;&gt;&gt; meta = api.get_table_metadata(\"TAB638\")\n&gt;&gt;&gt; meta.keys()\ndict_keys(['version', 'class', 'href', 'label', 'source',\n...         'updated', 'link', 'note', 'role', 'id',\n...         'size', 'dimension', 'extension'])\n&gt;&gt;&gt; meta.get(\"label\")\n'Folkmängden efter region, civilstånd, ålder, kön, tabellinnehåll och år'\n\n\n\n\nPxApi.get_table_variables(table_id)\nGet the specific metadata for variables and value codes. Also includes information whether a variable can be eliminated as well as the available code lists. The information returned is unpacked and slightly more easily navigated than the output from the .get_table_metadata() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntable_id\nstr\nThe ID of a table to get metadata from.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response containing the metadata.\n\n\n\n\n\n\n&gt;&gt;&gt; api.get_table_variable(\"TAB638\")\n{\n...     'Region': {\n...         'label': 'region',\n...         'category': {'label': {'00': 'Riket', '01': 'Stockholms län', ...}},\n...         'elimination': True,\n...         'codelists': [{'id': 'vs_RegionKommun07', 'label': 'Kommuner'}, ...]\n...     },\n...     'Alder': {\n...         'label': 'ålder',\n...         'category': {'label': {'0': '0 år', '1': '1 år', ...}},\n...         'elimination': True,\n...         'codelists': [{'id': 'agg_Ålder5år', 'label': '5-årsklasser'}, ...]\n...     },\n...     'Tid': {\n...         'label': 'år',\n...         'category': {'label': {'2022': '2022', '2023': '2023', ...}},\n...         'elimination': False,\n...         'codelists': []\n...     },\n...     ...\n}\n\n\n\n\nPxApi.search(\n    query=None,\n    past_days=None,\n    include_discontinued=None,\n    page_size=None,\n)\nSearch for tables.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquery\nstr\nA string to search for.\nNone\n\n\npast_days\nint\nReturn results where tables have been updated within n number of days.\nNone\n\n\ninclude_discontinued\nbool\nInclude any tables that are discontinued.\nNone\n\n\npage_size\nint\nNumber of results per page in the returning dict. Results will be paginated if they exceed this value.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict\nThe API response of the search query.\n\n\n\n\n\n\n&gt;&gt;&gt; api = PxApi(\"scb\")\n&gt;&gt;&gt; search = api.search(query=\"arbetsmarknad\", past_days=180)\n&gt;&gt;&gt; len(search.get(\"tables\"))\n4\n\n\n\n\nPxApi.tables_on_path(path_id)\nList all the tables available on the path.\n\n\n&gt;&gt;&gt; api.tables_on_path(\"AM0101C\")\n[\n... {'id': 'TAB2566',\n...  'label': 'Genomsnittlig månadslön för tjänstemän, privat sektor (KLP) efter näringsgren SNI2002 ...'},\n... {'id': 'TAB2552',\n...  'label': 'Genomsnittlig timlön för arbetare, privat sektor (KLP) efter näringsgren SNI2002 ...'},\n... {'id': 'TAB386',\n...  'label': 'Antal arbetare inom industrin efter näringsgren SNI92 ...'},\n... {'id': 'TAB2565',\n...  'label': 'Genomsnittlig månadslön för tjänstemän, privat sektor (KLP) efter provision och näringsgren SNI92 ...'},\n... {'id': 'TAB2551',\n...  'label': 'Genomsnittlig timlön för arbetare, privat sektor (KLP) efter näringsgren SNI92 ...'},\n... ...\n]     \n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nlist[dict]\nAll tables on the path."
  }
]